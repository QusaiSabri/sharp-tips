@page "/flights"
@rendermode InteractiveServer
@using MudBlazor
<MudPopoverProvider/>

<h3 class="">FlightBooking</h3>

    <div Class="flex flex-row gap-4">
        <MudAutocomplete T="string" Label="From" @bind-Value="value1" SearchFunc="@Search1" Variant="Variant.Outlined" Strict=false Margin="Margin.None" />
        <MudAutocomplete T="string" Label="To" @bind-Value="value1" SearchFunc="@Search1" Variant="Variant.Outlined" Strict=false Margin="Margin.None" />
        <MudDatePicker  Label="Basic example" @bind-Date="date" Variant="Variant.Outlined" />
        <MudIcon Icon="@Icons.Material.Filled.Search" Style="font-size: 2rem;" />
    </div> 

@code {

    DateTime? date = DateTime.Today;

    private string value1;
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(1);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
